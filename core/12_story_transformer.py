# AmritCore - SurtiConsole.py (Reading the Brain's State)

!pip install requests

import requests
import json
import os

# --- 1. Define the Path to the Brain's State File ---
# We assume the auto-run successfully created this file (surti_state.json)
# Note: Since the actual automated action (Step 5) is complex, we will simulate the file's existence 
# by defining its expected structure.

# Path to the actual JSON file on the repository (or local machine once the full CI runs)
STATE_FILE_URL = "https://raw.githubusercontent.com/gurpreetsingh5523/DroneMa_SurtiSync/main/surti_state.json"


# --- 2. Load the State (Simulated) ---
def check_surti_state():
    """
    Simulates loading the state from the SurtiSync module.
    
    NOTE: For demonstration stability, we are providing a simple, positive JSON output. 
    In a real CI run, this data would be generated by amritcore_surti_linker.py.
    """
    
    # Successful State Output (The ideal output from the SurtiSync Brain)
    simulated_output = {
        "status": "active",
        "vibration_frequency": "198 Hz (SatNaam)",
        "focus_level": "stable",
        "last_synced": "2025-10-07T12:00:00Z"
    }
    
    return simulated_output


# --- 3. Display the Console ---
console_state = check_surti_state()

print("\n\n--- AMRIT CORE SURTI CONSOLE V1.0 ---")
print("---------------------------------------")

if console_state['status'] == 'active':
    print("üß† **STUDIO BRAIN STATUS: ONLINE**")
    print(f"   Vibration Reference: {console_state['vibration_frequency']}")
    print(f"   Focus/Surti Level:   {console_state['focus_level'].upper()}")
    print(f"   Last Sync:           {console_state['last_synced']}")
else:
    print("‚ùå STUDIO BRAIN STATUS: OFFLINE. CHECK DRONEMA WORKFLOW.")
    
print("---------------------------------------")
print("Console is working. Ready for the next phase.")
